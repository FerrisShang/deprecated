commit d13b6edb9c874f4bfbd3fa0e79a227dfcf03bd62
Author: ShangFeng <feng.shang@ingenic.com>
Date:   Wed Jan 20 07:03:30 2016 -0500

    implenment ancs reconnect function
    
    Change-Id: I7e41268a604af578d34dd9bb23c30f1a98550d24

diff --git a/net/bluetooth/hci_core.c b/net/bluetooth/hci_core.c
index ace5e55..a4f0f3c 100644
--- a/net/bluetooth/hci_core.c
+++ b/net/bluetooth/hci_core.c
@@ -33,10 +33,22 @@
 #include <net/bluetooth/bluetooth.h>
 #include <net/bluetooth/hci_core.h>
 
+#include <linux/kernel.h>
+#include <linux/init.h>
+#include <linux/module.h>
+#include <linux/syscalls.h>
+#include <linux/fcntl.h>
+#include <asm/uaccess.h>
+
 static void hci_rx_work(struct work_struct *work);
 static void hci_cmd_work(struct work_struct *work);
 static void hci_tx_work(struct work_struct *work);
 
+#define LTKS_CACHE_FILE_NAME "/mnt/sdcard/bt_ltks.cache"
+#define MAX_LTK_NUM 32
+static void load_ltks(struct hci_dev *hdev);
+static void save_ltks(struct hci_dev *hdev);
+
 /* HCI device list */
 LIST_HEAD(hci_dev_list);
 DEFINE_RWLOCK(hci_dev_list_lock);
@@ -1170,6 +1182,7 @@ int hci_dev_open(__u16 dev)
 			mgmt_powered(hdev, 1);
 			hci_dev_unlock(hdev);
 		}
+		load_ltks(hdev);
 	} else {
 		/* Init failed, cleanup */
 		flush_work(&hdev->tx_work);
@@ -1693,10 +1706,62 @@ static bool hci_persistent_key(struct hci_dev *hdev, struct hci_conn *conn,
 	return false;
 }
 
-struct smp_ltk *hci_find_ltk(struct hci_dev *hdev, __le16 ediv, u8 rand[8])
+static void save_ltks(struct hci_dev *hdev)
 {
 	struct smp_ltk *k;
+	int fd, count = 0;
+	mm_segment_t old_fs = get_fs();
+	set_fs(KERNEL_DS);
+	fd = sys_open(LTKS_CACHE_FILE_NAME, O_WRONLY|O_CREAT|O_TRUNC, 0644);
+	if (fd >= 0) {
+		list_for_each_entry(k, &hdev->long_term_keys, list) {
+			sys_write(fd, (void*)k, sizeof(struct smp_ltk));
+			count++;
+			if(count >= MAX_LTK_NUM){
+				break;
+			}
+		}
+		sys_close(fd);
+	}else{
+		printk("failed to create cache file\n");
+	}
+	set_fs(old_fs);
+}
+
+static void load_ltks(struct hci_dev *hdev)
+{
+	struct smp_ltk *key, tmp;
+	int fd, res, count = 0;
+	mm_segment_t old_fs = get_fs();
+	set_fs(KERNEL_DS);
+	fd = sys_open(LTKS_CACHE_FILE_NAME, O_RDONLY, 0);
+	if (fd >= 0) {
+		hci_smp_ltks_clear(hdev);
+		while(1){
+			res = sys_read(fd, (void*)&tmp, sizeof(tmp));
+			if(res == sizeof(tmp)){
+				key = kzalloc(sizeof(*key), GFP_ATOMIC);
+				if(key){
+					memcpy(key, &tmp, sizeof(tmp));
+					list_add_tail(&key->list, &hdev->long_term_keys);
+					count++;
+					if(count >= MAX_LTK_NUM){
+						break;
+					}
+				}
+			}else{
+				break;
+			}
+		}
+	}else{
+		printk("failed to open cache file\n");
+	}
+	set_fs(old_fs);
+}
 
+struct smp_ltk *hci_find_ltk(struct hci_dev *hdev, __le16 ediv, u8 rand[8])
+{
+	struct smp_ltk *k;
 	list_for_each_entry(k, &hdev->long_term_keys, list) {
 		if (k->ediv != ediv ||
 		    memcmp(rand, k->rand, sizeof(k->rand)))
@@ -1808,6 +1873,7 @@ int hci_add_ltk(struct hci_dev *hdev, bdaddr_t *bdaddr, u8 addr_type, u8 type,
 	if (type & HCI_SMP_LTK)
 		mgmt_new_ltk(hdev, key, 1);
 
+	save_ltks(hdev);
 	return 0;
 }
 
diff --git a/net/bluetooth/hci_event.c b/net/bluetooth/hci_event.c
index 1cd9075..7defc0d 100755
--- a/net/bluetooth/hci_event.c
+++ b/net/bluetooth/hci_event.c
@@ -3628,8 +3628,8 @@ static void hci_le_ltk_request_evt(struct hci_dev *hdev, struct sk_buff *skb)
 	hci_send_cmd(hdev, HCI_OP_LE_LTK_REPLY, sizeof(cp), &cp);
 
 	if (ltk->type & HCI_SMP_STK) {
-		list_del(&ltk->list);
-		kfree(ltk);
+		//list_del(&ltk->list);
+		//kfree(ltk);
 	}
 
 	hci_dev_unlock(hdev);
diff --git a/net/bluetooth/smp.c b/net/bluetooth/smp.c
index b5562ab..607410f 100644
--- a/net/bluetooth/smp.c
+++ b/net/bluetooth/smp.c
@@ -366,6 +366,18 @@ static int tk_request(struct l2cap_conn *conn, u8 remote_oob, u8 auth,
 	return ret;
 }
 
+bdaddr_t* convAddr(bdaddr_t *addr)
+{
+	static bdaddr_t sAddr;
+	memcpy(&sAddr, addr, sizeof(sAddr));
+	sAddr.b[5] = ~sAddr.b[5];
+	sAddr.b[5] &= 0x7F;
+	sAddr.b[5] |= 0x40;
+	return &sAddr;
+}
+
+#define LOCAL_ADDR_TYPE 1 //add by feng.shang : random address type
+
 static void confirm_work(struct work_struct *work)
 {
 	struct smp_chan *smp = container_of(work, struct smp_chan, confirm);
@@ -386,11 +398,11 @@ static void confirm_work(struct work_struct *work)
 	smp->tfm = tfm;
 
 	if (conn->hcon->out)
-		ret = smp_c1(tfm, smp->tk, smp->prnd, smp->preq, smp->prsp, 0,
-			     conn->src, conn->hcon->dst_type, conn->dst, res);
+		ret = smp_c1(tfm, smp->tk, smp->prnd, smp->preq, smp->prsp, LOCAL_ADDR_TYPE,
+			     convAddr(conn->src), conn->hcon->dst_type, conn->dst, res);
 	else
 		ret = smp_c1(tfm, smp->tk, smp->prnd, smp->preq, smp->prsp,
-			     conn->hcon->dst_type, conn->dst, 0, conn->src,
+			     conn->hcon->dst_type, conn->dst, LOCAL_ADDR_TYPE, convAddr(conn->src),
 			     res);
 	if (ret) {
 		reason = SMP_UNSPECIFIED;
@@ -425,11 +437,11 @@ static void random_work(struct work_struct *work)
 	BT_DBG("conn %p %s", conn, conn->hcon->out ? "master" : "slave");
 
 	if (hcon->out)
-		ret = smp_c1(tfm, smp->tk, smp->rrnd, smp->preq, smp->prsp, 0,
-			     conn->src, hcon->dst_type, conn->dst, res);
+		ret = smp_c1(tfm, smp->tk, smp->rrnd, smp->preq, smp->prsp, LOCAL_ADDR_TYPE,
+			     convAddr(conn->src), hcon->dst_type, conn->dst, res);
 	else
 		ret = smp_c1(tfm, smp->tk, smp->rrnd, smp->preq, smp->prsp,
-			     hcon->dst_type, conn->dst, 0, conn->src, res);
+			     hcon->dst_type, conn->dst, LOCAL_ADDR_TYPE, convAddr(conn->src), res);
 	if (ret) {
 		reason = SMP_UNSPECIFIED;
 		goto error;
@@ -996,7 +1008,7 @@ int smp_distribute_keys(struct l2cap_conn *conn, __u8 force)
 
 		/* Just public address */
 		memset(&addrinfo, 0, sizeof(addrinfo));
-		bacpy(&addrinfo.bdaddr, conn->src);
+		bacpy(&addrinfo.bdaddr, convAddr(conn->src));
 
 		smp_send_cmd(conn, SMP_CMD_IDENT_ADDR_INFO, sizeof(addrinfo),
 								&addrinfo);
